using DEA.Core;
using System;
using System.Runtime.InteropServices;

namespace DEA.Tools.Compression.LZ4
{
    public class Lz4Compressor : DataCompressorBase
    {
        [DllImport("lz4_x32.dll", EntryPoint = "dll_LZ4_compress", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Compress_x86(byte[] source, byte[] destination, int size);

        [DllImport("lz4_x32.dll", EntryPoint = "dll_LZ4_compressHC", CallingConvention = CallingConvention.Cdecl)]
        private static extern int CompressHc_x86(byte[] source, byte[] destination, int size);

        [DllImport("lz4_x32.dll", EntryPoint = "dll_LZ4_uncompress", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Uncompress_x86(byte[] source, byte[] destination, int size);


        [DllImport("lz4_x64.dll", EntryPoint = "dll_LZ4_compress", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Compress_x64(byte[] source, byte[] destination, int size);

        [DllImport("lz4_x64.dll", EntryPoint = "dll_LZ4_compressHC", CallingConvention = CallingConvention.Cdecl)]
        private static extern int CompressHc_x64(byte[] source, byte[] destination, int size);

        [DllImport("lz4_x64.dll", EntryPoint = "dll_LZ4_uncompress", CallingConvention = CallingConvention.Cdecl)]
        private static extern int Uncompress_x64(byte[] source, byte[] destination, int size);


        private readonly bool _is64BitProcess;

        public Lz4Compressor()
        {
            _is64BitProcess = Environment.Is64BitProcess;
        }

        public override byte[] Compress(byte[] data)
        {
            var result = CompressImpl(data);
            return result;
        }

        public override byte[] Decompress(byte[] data)
        {
            var result = DecompressImpl(data);
            return result;
        }

        private byte[] CompressImpl(byte[] source) => CompressImpl(source, true);

        private byte[] CompressImpl(byte[] source, bool fastCompress)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            var size = 0;
            var length = source.Length;
            var buffer = new byte[CompressBound(length)];

            if (fastCompress)
            {
                if (_is64BitProcess)
                    size = Compress_x64(source, buffer, length);
                else
                    size = Compress_x86(source, buffer, length);
            }
            else
            {
                if (_is64BitProcess)
                    size = CompressHc_x64(source, buffer, length);
                else
                    size = CompressHc_x86(source, buffer, length);
            }

            var compressed = new byte[size + 8];

            compressed[0] = (byte)length;
            compressed[1] = (byte)(length >> 8);
            compressed[2] = (byte)(length >> 16);
            compressed[3] = (byte)(length >> 24);

            compressed[4] = (byte)size;
            compressed[5] = (byte)(size >> 8);
            compressed[6] = (byte)(size >> 16);
            compressed[7] = (byte)(size >> 24);

            Buffer.BlockCopy(buffer, 0, compressed, 8, size);

            return compressed;
        }

        private byte[] DecompressImpl(byte[] source)
        {
            if (source == null)
                throw new ArgumentNullException(nameof(source));

            var length = BitConverter.ToInt32(source, 0);
            var size = BitConverter.ToInt32(source, 4);

            if (source.Length < size)
                throw new Exception("Input data is incomplete. Total data array size is lesser than header info size. Data array could be incomplete or was not generated by 'CompressBytes' or 'Compress'.");

            var compressed = new byte[source.Length - 8];
            Buffer.BlockCopy(source, 8, compressed, 0, compressed.Length);

            var decompressed = new byte[length];

            if (_is64BitProcess)
                Uncompress_x64(compressed, decompressed, length);
            else
                Uncompress_x86(compressed, decompressed, length);

            return decompressed;
        }

        private int CompressBound(int size) => size + size / byte.MaxValue + 16;

        protected override void Dispose(bool disposing)
        {
        }
    }
}
